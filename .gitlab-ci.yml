image: node:18
stages:
  - install
  - test
  - build
  - publish

cache: &global_cache
  key:
    files:
      - ./package.json
  paths:
    - node_modules
  policy: pull

install-dependencies:
  tags:
    - docker-builder
  stage: install
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/:_authToken=\${CI_JOB_TOKEN}"
          echo "${CI_API_V4_URL#http*:}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc
    - npm config set proxy http://192.168.10.100:88
    - npm config set https-proxy http://192.168.10.100:88
    - npm ci
  cache:
    <<: *global_cache
    # override the policy
    policy: pull-push

lint:
  tags:
    - docker-builder
  stage: test
  script:
    - npm run lint

test:
  tags:
    - docker-builder
  stage: test
  script:
    - npm run test

build:
  tags:
    - docker-builder
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist

publish:
  only:
    - main
  tags:
    - docker-builder
  stage: publish
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    # If $SIGSTORE_ID_TOKEN is set this template will generate a provenance
    # document. For more information refer to the documentation: https://docs.gitlab.com/ee/ci/yaml/signing_examples/

    - echo $(npm view ${NPM_PACKAGE_NAME} versions)
    - echo ${NPM_PACKAGE_VERSION}
    - |
      if [[ "$(npm view ${NPM_PACKAGE_NAME} versions)" != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

pages:
  stage: publish
  tags:
    - docker-builder
  only:
    - main
  script:
    - rm -rf public && mkdir public
    - npm run docs
    - cp -r docs public/docs
  artifacts:
    paths:
      - public
